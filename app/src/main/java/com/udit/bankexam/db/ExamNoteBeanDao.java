package com.udit.bankexam.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.udit.bankexam.bean.ExamNoteBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAM_NOTE_BEAN".
*/
public class ExamNoteBeanDao extends AbstractDao<ExamNoteBean, String> {

    public static final String TABLENAME = "EXAM_NOTE_BEAN";

    /**
     * Properties of entity ExamNoteBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property Note = new Property(1, String.class, "Note", false, "note");
        public final static Property Uid = new Property(2, String.class, "uid", false, "uid");
        public final static Property LinkID = new Property(3, String.class, "LinkID", false, "LinkID");
        public final static Property Date = new Property(4, String.class, "Date", false, "Date");
    }


    public ExamNoteBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ExamNoteBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAM_NOTE_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"note\" TEXT," + // 1: Note
                "\"uid\" TEXT," + // 2: uid
                "\"LinkID\" TEXT," + // 3: LinkID
                "\"Date\" TEXT);"); // 4: Date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAM_NOTE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExamNoteBean entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(2, Note);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String LinkID = entity.getLinkID();
        if (LinkID != null) {
            stmt.bindString(4, LinkID);
        }
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(5, Date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExamNoteBean entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String Note = entity.getNote();
        if (Note != null) {
            stmt.bindString(2, Note);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String LinkID = entity.getLinkID();
        if (LinkID != null) {
            stmt.bindString(4, LinkID);
        }
 
        String Date = entity.getDate();
        if (Date != null) {
            stmt.bindString(5, Date);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ExamNoteBean readEntity(Cursor cursor, int offset) {
        ExamNoteBean entity = new ExamNoteBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Note
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // LinkID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExamNoteBean entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNote(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLinkID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ExamNoteBean entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(ExamNoteBean entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExamNoteBean entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
