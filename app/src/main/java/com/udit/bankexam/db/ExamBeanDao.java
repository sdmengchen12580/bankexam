package com.udit.bankexam.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.udit.bankexam.bean.ExamBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAM_BEAN".
*/
public class ExamBeanDao extends AbstractDao<ExamBean, String> {

    public static final String TABLENAME = "EXAM_BEAN";

    /**
     * Properties of entity ExamBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property ID = new Property(1, String.class, "ID", false, "ID");
        public final static Property ExamIds = new Property(2, String.class, "examIds", false, "examIds");
        public final static Property Score = new Property(3, String.class, "score", false, "score");
        public final static Property TitleID = new Property(4, String.class, "titleID", false, "titleID");
        public final static Property Bank = new Property(5, String.class, "bank", false, "bank");
        public final static Property TYear = new Property(6, String.class, "TYear", false, "TYear");
        public final static Property QType = new Property(7, String.class, "QType", false, "QType");
        public final static Property Content = new Property(8, String.class, "content", false, "content");
        public final static Property QPoint = new Property(9, String.class, "QPoint", false, "QPoint");
        public final static Property IsBank = new Property(10, String.class, "isBank", false, "isBank");
        public final static Property Title = new Property(11, String.class, "title", false, "title");
        public final static Property ID_Ord1 = new Property(12, String.class, "ID_Ord1", false, "ID_Ord1");
        public final static Property CCount = new Property(13, String.class, "CCount", false, "CCount");
        public final static Property Ord = new Property(14, String.class, "ord", false, "ord");
        public final static Property CDate = new Property(15, String.class, "CDate", false, "CDate");
        public final static Property Solution = new Property(16, String.class, "solution", false, "solution");
        public final static Property Analysis = new Property(17, String.class, "analysis", false, "analysis");
        public final static Property Material = new Property(18, String.class, "material", false, "material");
        public final static Property EID = new Property(19, String.class, "EID", false, "EID");
        public final static Property OID = new Property(20, String.class, "OID", false, "OID");
        public final static Property Answer = new Property(21, String.class, "answer", false, "answer");
        public final static Property IsOK = new Property(22, String.class, "isOK", false, "isOK");
        public final static Property GetScore = new Property(23, String.class, "getScore", false, "getScore");
        public final static Property ATime = new Property(24, String.class, "ATime", false, "ATime");
        public final static Property OrdID = new Property(25, String.class, "ordID", false, "ordID");
        public final static Property Note = new Property(26, String.class, "note", false, "note");
        public final static Property Flag_oid = new Property(27, boolean.class, "flag_oid", false, "flag_oid");
        public final static Property Flag_biaoji = new Property(28, boolean.class, "flag_biaoji", false, "flag_biaoji");
        public final static Property Flag_zhineng = new Property(29, boolean.class, "flag_zhineng", false, "flag_zhineng");
        public final static Property UserTime = new Property(30, String.class, "userTime", false, "userTime");
        public final static Property User_id = new Property(31, String.class, "user_id", false, "user_id");
    }


    public ExamBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ExamBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAM_BEAN\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"ID\" TEXT," + // 1: ID
                "\"examIds\" TEXT," + // 2: examIds
                "\"score\" TEXT," + // 3: score
                "\"titleID\" TEXT," + // 4: titleID
                "\"bank\" TEXT," + // 5: bank
                "\"TYear\" TEXT," + // 6: TYear
                "\"QType\" TEXT," + // 7: QType
                "\"content\" TEXT," + // 8: content
                "\"QPoint\" TEXT," + // 9: QPoint
                "\"isBank\" TEXT," + // 10: isBank
                "\"title\" TEXT," + // 11: title
                "\"ID_Ord1\" TEXT," + // 12: ID_Ord1
                "\"CCount\" TEXT," + // 13: CCount
                "\"ord\" TEXT," + // 14: ord
                "\"CDate\" TEXT," + // 15: CDate
                "\"solution\" TEXT," + // 16: solution
                "\"analysis\" TEXT," + // 17: analysis
                "\"material\" TEXT," + // 18: material
                "\"EID\" TEXT," + // 19: EID
                "\"OID\" TEXT," + // 20: OID
                "\"answer\" TEXT," + // 21: answer
                "\"isOK\" TEXT," + // 22: isOK
                "\"getScore\" TEXT," + // 23: getScore
                "\"ATime\" TEXT," + // 24: ATime
                "\"ordID\" TEXT," + // 25: ordID
                "\"note\" TEXT," + // 26: note
                "\"flag_oid\" INTEGER NOT NULL ," + // 27: flag_oid
                "\"flag_biaoji\" INTEGER NOT NULL ," + // 28: flag_biaoji
                "\"flag_zhineng\" INTEGER NOT NULL ," + // 29: flag_zhineng
                "\"userTime\" TEXT," + // 30: userTime
                "\"user_id\" TEXT);"); // 31: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExamBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String examIds = entity.getExamIds();
        if (examIds != null) {
            stmt.bindString(3, examIds);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(4, score);
        }
 
        String titleID = entity.getTitleID();
        if (titleID != null) {
            stmt.bindString(5, titleID);
        }
 
        String bank = entity.getBank();
        if (bank != null) {
            stmt.bindString(6, bank);
        }
 
        String TYear = entity.getTYear();
        if (TYear != null) {
            stmt.bindString(7, TYear);
        }
 
        String QType = entity.getQType();
        if (QType != null) {
            stmt.bindString(8, QType);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
 
        String QPoint = entity.getQPoint();
        if (QPoint != null) {
            stmt.bindString(10, QPoint);
        }
 
        String isBank = entity.getIsBank();
        if (isBank != null) {
            stmt.bindString(11, isBank);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
 
        String ID_Ord1 = entity.getID_Ord1();
        if (ID_Ord1 != null) {
            stmt.bindString(13, ID_Ord1);
        }
 
        String CCount = entity.getCCount();
        if (CCount != null) {
            stmt.bindString(14, CCount);
        }
 
        String ord = entity.getOrd();
        if (ord != null) {
            stmt.bindString(15, ord);
        }
 
        String CDate = entity.getCDate();
        if (CDate != null) {
            stmt.bindString(16, CDate);
        }
 
        String solution = entity.getSolution();
        if (solution != null) {
            stmt.bindString(17, solution);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(18, analysis);
        }
 
        String material = entity.getMaterial();
        if (material != null) {
            stmt.bindString(19, material);
        }
 
        String EID = entity.getEID();
        if (EID != null) {
            stmt.bindString(20, EID);
        }
 
        String OID = entity.getOID();
        if (OID != null) {
            stmt.bindString(21, OID);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(22, answer);
        }
 
        String isOK = entity.getIsOK();
        if (isOK != null) {
            stmt.bindString(23, isOK);
        }
 
        String getScore = entity.getGetScore();
        if (getScore != null) {
            stmt.bindString(24, getScore);
        }
 
        String ATime = entity.getATime();
        if (ATime != null) {
            stmt.bindString(25, ATime);
        }
 
        String ordID = entity.getOrdID();
        if (ordID != null) {
            stmt.bindString(26, ordID);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(27, note);
        }
        stmt.bindLong(28, entity.getFlag_oid() ? 1L: 0L);
        stmt.bindLong(29, entity.getFlag_biaoji() ? 1L: 0L);
        stmt.bindLong(30, entity.getFlag_zhineng() ? 1L: 0L);
 
        String userTime = entity.getUserTime();
        if (userTime != null) {
            stmt.bindString(31, userTime);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(32, user_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExamBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String examIds = entity.getExamIds();
        if (examIds != null) {
            stmt.bindString(3, examIds);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(4, score);
        }
 
        String titleID = entity.getTitleID();
        if (titleID != null) {
            stmt.bindString(5, titleID);
        }
 
        String bank = entity.getBank();
        if (bank != null) {
            stmt.bindString(6, bank);
        }
 
        String TYear = entity.getTYear();
        if (TYear != null) {
            stmt.bindString(7, TYear);
        }
 
        String QType = entity.getQType();
        if (QType != null) {
            stmt.bindString(8, QType);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
 
        String QPoint = entity.getQPoint();
        if (QPoint != null) {
            stmt.bindString(10, QPoint);
        }
 
        String isBank = entity.getIsBank();
        if (isBank != null) {
            stmt.bindString(11, isBank);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
 
        String ID_Ord1 = entity.getID_Ord1();
        if (ID_Ord1 != null) {
            stmt.bindString(13, ID_Ord1);
        }
 
        String CCount = entity.getCCount();
        if (CCount != null) {
            stmt.bindString(14, CCount);
        }
 
        String ord = entity.getOrd();
        if (ord != null) {
            stmt.bindString(15, ord);
        }
 
        String CDate = entity.getCDate();
        if (CDate != null) {
            stmt.bindString(16, CDate);
        }
 
        String solution = entity.getSolution();
        if (solution != null) {
            stmt.bindString(17, solution);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(18, analysis);
        }
 
        String material = entity.getMaterial();
        if (material != null) {
            stmt.bindString(19, material);
        }
 
        String EID = entity.getEID();
        if (EID != null) {
            stmt.bindString(20, EID);
        }
 
        String OID = entity.getOID();
        if (OID != null) {
            stmt.bindString(21, OID);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(22, answer);
        }
 
        String isOK = entity.getIsOK();
        if (isOK != null) {
            stmt.bindString(23, isOK);
        }
 
        String getScore = entity.getGetScore();
        if (getScore != null) {
            stmt.bindString(24, getScore);
        }
 
        String ATime = entity.getATime();
        if (ATime != null) {
            stmt.bindString(25, ATime);
        }
 
        String ordID = entity.getOrdID();
        if (ordID != null) {
            stmt.bindString(26, ordID);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(27, note);
        }
        stmt.bindLong(28, entity.getFlag_oid() ? 1L: 0L);
        stmt.bindLong(29, entity.getFlag_biaoji() ? 1L: 0L);
        stmt.bindLong(30, entity.getFlag_zhineng() ? 1L: 0L);
 
        String userTime = entity.getUserTime();
        if (userTime != null) {
            stmt.bindString(31, userTime);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(32, user_id);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ExamBean readEntity(Cursor cursor, int offset) {
        ExamBean entity = new ExamBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // examIds
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // score
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // titleID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bank
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TYear
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // QType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // QPoint
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // isBank
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // title
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ID_Ord1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // CCount
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ord
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // CDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // solution
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // analysis
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // material
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // EID
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // OID
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // answer
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // isOK
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // getScore
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // ATime
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // ordID
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // note
            cursor.getShort(offset + 27) != 0, // flag_oid
            cursor.getShort(offset + 28) != 0, // flag_biaoji
            cursor.getShort(offset + 29) != 0, // flag_zhineng
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // userTime
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExamBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExamIds(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setScore(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitleID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBank(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTYear(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQPoint(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsBank(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setID_Ord1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCCount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOrd(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCDate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSolution(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAnalysis(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMaterial(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setEID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setOID(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAnswer(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIsOK(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setGetScore(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setATime(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOrdID(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setNote(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setFlag_oid(cursor.getShort(offset + 27) != 0);
        entity.setFlag_biaoji(cursor.getShort(offset + 28) != 0);
        entity.setFlag_zhineng(cursor.getShort(offset + 29) != 0);
        entity.setUserTime(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setUser_id(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ExamBean entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(ExamBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExamBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
