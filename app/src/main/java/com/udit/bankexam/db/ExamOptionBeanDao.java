package com.udit.bankexam.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.udit.bankexam.bean.ExamOptionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAM_OPTION_BEAN".
*/
public class ExamOptionBeanDao extends AbstractDao<ExamOptionBean, String> {

    public static final String TABLENAME = "EXAM_OPTION_BEAN";

    /**
     * Properties of entity ExamOptionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, String.class, "_id", true, "_ID");
        public final static Property Examid = new Property(1, String.class, "examid", false, "examid");
        public final static Property TitleListID = new Property(2, String.class, "titleListID", false, "titleListID");
        public final static Property OrderID = new Property(3, String.class, "orderID", false, "orderID");
        public final static Property Single = new Property(4, String.class, "single", false, "single");
        public final static Property SList = new Property(5, String.class, "SList", false, "SList");
        public final static Property User_id = new Property(6, String.class, "user_id", false, "user_id");
    }


    public ExamOptionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ExamOptionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAM_OPTION_BEAN\" (" + //
                "\"_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: _id
                "\"examid\" TEXT," + // 1: examid
                "\"titleListID\" TEXT," + // 2: titleListID
                "\"orderID\" TEXT," + // 3: orderID
                "\"single\" TEXT," + // 4: single
                "\"SList\" TEXT," + // 5: SList
                "\"user_id\" TEXT);"); // 6: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAM_OPTION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExamOptionBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String examid = entity.getExamid();
        if (examid != null) {
            stmt.bindString(2, examid);
        }
 
        String titleListID = entity.getTitleListID();
        if (titleListID != null) {
            stmt.bindString(3, titleListID);
        }
 
        String orderID = entity.getOrderID();
        if (orderID != null) {
            stmt.bindString(4, orderID);
        }
 
        String single = entity.getSingle();
        if (single != null) {
            stmt.bindString(5, single);
        }
 
        String SList = entity.getSList();
        if (SList != null) {
            stmt.bindString(6, SList);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(7, user_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExamOptionBean entity) {
        stmt.clearBindings();
 
        String _id = entity.get_id();
        if (_id != null) {
            stmt.bindString(1, _id);
        }
 
        String examid = entity.getExamid();
        if (examid != null) {
            stmt.bindString(2, examid);
        }
 
        String titleListID = entity.getTitleListID();
        if (titleListID != null) {
            stmt.bindString(3, titleListID);
        }
 
        String orderID = entity.getOrderID();
        if (orderID != null) {
            stmt.bindString(4, orderID);
        }
 
        String single = entity.getSingle();
        if (single != null) {
            stmt.bindString(5, single);
        }
 
        String SList = entity.getSList();
        if (SList != null) {
            stmt.bindString(6, SList);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(7, user_id);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ExamOptionBean readEntity(Cursor cursor, int offset) {
        ExamOptionBean entity = new ExamOptionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // examid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // titleListID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // single
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SList
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExamOptionBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setExamid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitleListID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSingle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSList(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ExamOptionBean entity, long rowId) {
        return entity.get_id();
    }
    
    @Override
    public String getKey(ExamOptionBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExamOptionBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
